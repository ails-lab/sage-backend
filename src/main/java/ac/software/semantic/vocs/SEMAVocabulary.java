package ac.software.semantic.vocs;

import java.util.HashSet;
import java.util.Set;

import edu.ntua.isci.ac.lod.vocabularies.Vocabulary;

import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Resource;

public class SEMAVocabulary extends Vocabulary {
	public static String SEMM_NAMESPACE = "http://sw.islab.ntua.gr/semaspace/model/";
	
    public static Resource RemoteDataset = model.createResource(SEMM_NAMESPACE + "RemoteDataset");
    
    public static Resource DataCollection = model.createResource(SEMM_NAMESPACE + "DataCollection");
    public static Resource DataCatalog = model.createResource(SEMM_NAMESPACE + "DataCatalog");
    
    public static Resource VocabularyCollection = model.createResource(SEMM_NAMESPACE + "VocabularyCollection");
//    public static Resource TemporalCollection = model.createResource(SEMM_NAMESPACE + "TemporalCollection");
//    public static Resource SpatialCollection = model.createResource(SEMM_NAMESPACE + "SpatialCollection");
//    public static Resource GeneralCollection = model.createResource(SEMM_NAMESPACE + "GeneralCollection");
//    public static Resource ThesaurusCollection = model.createResource(SEMM_NAMESPACE + "ThesaurusCollection");
//    public static Resource AssertionCollection = model.createResource(SEMM_NAMESPACE + "AssertionCollection");
    
    public static Resource EmbeddingAnnotation = model.createResource(SEMM_NAMESPACE + "EmbeddingAnnotation");
    
    public static Resource SKOSThesaurus = model.createResource(SEMM_NAMESPACE + "SKOSThesaurus");
    public static Resource OWLOntology = model.createResource(SEMM_NAMESPACE + "OWLOntology");
    
    public static Resource Autogenerated = model.createResource(SEMM_NAMESPACE + "Autogenerated");
    
    public static Resource SpatialAnnotation = model.createResource(SEMM_NAMESPACE + "SpatialAnnotation");
    public static Resource TemporalAnnotation = model.createResource(SEMM_NAMESPACE + "TemporalAnnotation");
    public static Resource TermAnnotation = model.createResource(SEMM_NAMESPACE + "TermAnnotation");
    
    public static Resource VocabularyTerm = model.createResource(SEMM_NAMESPACE + "VocabularyTerm");
    public static Resource CollectionResource = model.createResource(SEMM_NAMESPACE + "CollectionResource");
    
    public static Resource Alignment = model.createResource(SEMM_NAMESPACE + "Alignment");
    
    public static Property isAlignmentOf = model.createProperty(SEMM_NAMESPACE + "isAlignmentOf");
    
    public static Property clazz = model.createProperty(SEMM_NAMESPACE + "class");
    public static Property dataProperty = model.createProperty(SEMM_NAMESPACE + "dataProperty");
    public static Property indexProperty = model.createProperty(SEMM_NAMESPACE + "indexProperty");
    public static Property prefix = model.createProperty(SEMM_NAMESPACE + "prefix");
    public static Property endpoint = model.createProperty(SEMM_NAMESPACE + "endpoint");
    public static Property uri = model.createProperty(SEMM_NAMESPACE + "uri");
    public static Property scheme = model.createProperty(SEMM_NAMESPACE + "scheme");
    
    public static Property source = model.createProperty(SEMM_NAMESPACE + "source");
    public static Property target = model.createProperty(SEMM_NAMESPACE + "target");
    public static Property aboxOf = model.createProperty(SEMM_NAMESPACE + "aboxOf");
    public static Property onProperty = model.createProperty(SEMM_NAMESPACE + "onProperty");
    public static Property separator = model.createProperty(SEMM_NAMESPACE + "separator");
    
    public static Property hasBeginning = model.createProperty(SEMM_NAMESPACE + "hasBeginning");
    public static Property hasEnd = model.createProperty(SEMM_NAMESPACE + "hasEnd");
    
    public static Property annotatorPrepared = model.createProperty(SEMM_NAMESPACE + "annotatorPrepared");
    public static Property annotatorPreparing = model.createProperty(SEMM_NAMESPACE + "annotatorPreparing");
    public static Property thesaurusUnloaded = model.createProperty(SEMM_NAMESPACE + "thesaurusUnloaded");
    public static Property thesaurusLoaded = model.createProperty(SEMM_NAMESPACE + "thesaurusLoaded");
    public static Property thesaurusLoading = model.createProperty(SEMM_NAMESPACE + "thesaurusLoading");
    
    public static Resource getAnnotationType(AnnotationType type) {
    	if (type == AnnotationType.SPATIAL) {
    		return SpatialAnnotation;
    	} else if (type == AnnotationType.TEMPORAL) {
    		return TemporalAnnotation;
    	} else if (type == AnnotationType.GENERIC) {
    		return TermAnnotation;
    	}
    	
    	return null;
    }

//    public static Set<Resource> getSuperCollections(String t) {
//    	Set<Resource> res = new HashSet<>();
//    	
//    	if (t.equals(TemporalCollection.toString())) {
//    		res.add(VocabularyCollection);
//    	}
//    	
//    	if (t.equals(SpatialCollection.toString())) {
//    		res.add(VocabularyCollection);
//    	}
//
//    	if (t.equals(GeneralCollection.toString())) {
//    		res.add(VocabularyCollection);
//    	}
//
//    	if (t.equals(ThesaurusCollection.toString())) {
//    		res.add(VocabularyCollection);
//    	}
//    	
//    	if (t.equals(AssertionCollection.toString())) {
//    		res.add(VocabularyCollection);
//    	}
//
//    	return res;
//    }

}

