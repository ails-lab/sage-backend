@prefix rr:    <http://www.w3.org/ns/r2rml#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix http: 	<http://www.w3.org/2011/http#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix oa: <http://www.w3.org/ns/oa#> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix cnt: <http://www.w3.org/2011/content#> .

@prefix dr:   <http://islab.ntua.gr/ns/d2rml#> .
@prefix op:  <http://islab.ntua.gr/ns/d2rml-op#> .
@prefix is:  <http://islab.ntua.gr/ns/d2rml-is#> .

@prefix collection:    <http://sw.islab.ntua.gr/semaspace/resource/annotation/> .
@prefix model: <http://sw.islab.ntua.gr/semaspace/model/>

<#SPARQLEndpoint>
   a is:SPARQLService ;
   is:uri "{@@iirdfsource@@}" .
   
<#GEEKService>
   a is:HTTPSource ;
   is:request [ 
#      http:absoluteURI "http://apps-python.image.ece.ntua.gr/geek/api/ned/?list={@@text@@}&separator={@@separator@@}&language={@@language@@}" ;
#      http:methodName "GET" ;
      http:absoluteURI "http://apps-python.image.ece.ntua.gr/geek/api/ned/" ;
	  http:methodName "POST" ;
      http:headers ( [ http:fieldName "Content-Type" ;
                       http:fieldValue "application/json" ; ] ) ;
      http:body [ a cnt:ContentAsText ;
                  cnt:chars "{ \"list\": \"{@@text@@}\", \"separator\": \"{@@separator@@}\", \"language\": \"{@@language@@}\" }" ; ] ;
   ] ;
   is:parameters ( [ 
      a is:DataVariable;
      is:name "text" ;
   ] ) .
   
<#GEEKMapping>
   dr:logicalSource [ 
      dr:source <#GEEKService> ;
      dr:iterator "$[*]";
	  dr:referenceFormulation is:JSONPath;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "text" ;
#      rr:column "{##ppLEXICAL-VALUE##}" ;
	  rr:column "lexicalValue" ;
#       rr:column "##1" ;
	   dr:escapeType dr:EscapeJSON ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "separator" ;
      rr:constant "{@@separator@@}" ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "language" ;
      rr:constant "{@@language@@}" ;
   ] .   	
   
<#WikidataEndpoint>
   a is:SPARQLService ;
   is:uri "https://query.wikidata.org/bigdata/namespace/wdq/sparql" .

<#WikidataMapping>
   rr:logicalTable [ 
      dr:source <#WikidataEndpoint> ;
      dr:sparqlQuery "PREFIX schema: <http://schema.org/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { <{@@wikilink@@}> schema:about ?uri }" ;  
   ] ;
   dr:parameterBinding [ 
      dr:parameter "wikilink" ;
      rr:template "{SCHEMA}{URLENCODED}" ;
   ] .
   
<#EntityLookupTransformation>  
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT ?id WHERE { GRAPH <{@@iigraph@@}> { ?id {@@iiproperty@@} {@@literal@@} } }" ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "iirdfsource" ;
      rr:constant "{@@iirdfsource@@}" ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "literal" ;
      rr:column "literal" ;
      dr:valueType rr:Literal ;
      dr:escapeType dr:EscapeSpecial ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "iigraph" ;
      rr:constant "{@@iigraph@@}" ;
   ] ;   
   dr:parameterBinding [ 
      dr:parameter "iiproperty" ;
      rr:constant "{@@iiproperty@@}" ;
   ] .   
   
#<#TMPSource>   
#         a is:FileSource ;
#         is:string "Υπουργείο Οικονομικών, Κληροδοτήματα, Δημοπρασίες, Ερρίκος Σκάσσης, πρύτανης, Ενοικιάσεις, Κτήματα, Ακίνητη Περιουσία, Οικονομικό Συμβούλιο, Προκηρύξεις, Αναφορές, Αιτήσεις, Ανώνυμος Ελληνική Τηλεφωνική Εταιρία, Επισκευές, Εργασίες, Γρηγόριος Ξενόπουλος, ενοικιαστής, Συνεργαζόμενοι Επαγγελματίες σε Εργασίες του Πανεπιστημίου, Ονόματα, Φορολογία, Κατοχή, Αρχές Κατοχής, Στέγαση, Επιτάξεις, Εκμισθώσεις, Βασίλειος Μακρής, γενικός γραμματέας " .
     
   
<#EnrichMapping>  
   a  <http://islab.ntua.gr/ns/d2rml#PrimaryTriplesMap> ;
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT DISTINCT ?literal ?lexicalValue ?language WHERE { GRAPH <{@@iigraph@@}> { ?id {@@iiproperty@@} ?literal . FILTER (isLiteral(?literal)) . BIND(STR(?literal) AS ?lexicalValue) . BIND(LANG(?literal) AS ?language) } }" ;
#      dr:source <#TMPSource> ;
#      a dr:TextTable ;
	  is:parameters ( [ 
         a is:ExternalVariable;
         is:name "iigraph" ;
      ] [ 
         a is:ExternalVariable;
         is:name "iiproperty" ;
      ] ) ;
#      dr:maxItems 1 ;
   ] ;
   dr:transformations ( <#GEEKMapping> <#EntityLookupTransformation>) ;
   dr:pivots ( [ 
      dr:transformationReference <#GEEKMapping> ;
	  dr:locally [
	     dr:transformations ( <#WikidataMapping> ) ;
         dr:definedColumns ( [
            dr:name "SCHEMA" ;
            dr:function op:extractMatch;
            dr:parameterBinding [ 
               dr:parameter "input" ;
               rr:column "$.wiki_page" ;
               dr:transformationReference <#GEEKMapping> ;
            ] ;
            dr:parameterBinding [ 
               dr:parameter "regex" ;
               rr:constant "^(.*?/wiki/).*" ;
            ] ;
         ] [
            dr:name "LEMMA" ;
            dr:function op:extractMatch;
            dr:parameterBinding [ 
               dr:parameter "input" ;
               rr:column "$.wiki_page" ;
               dr:transformationReference <#GEEKMapping> ;
            ] ;
            dr:parameterBinding [ 
               dr:parameter "regex" ;
               rr:constant "^.*?/wiki/(.*?)$" ;
           ] ;
          ][
            dr:name "URLENCODED" ;
            dr:function op:urlencode;
            dr:parameterBinding [ 
               dr:parameter "input" ;
               rr:column "LEMMA" ;
            ] ;
         ] );	  
      ] ;
	] [
      dr:transformationReference <#EntityLookupTransformation> ;
    ] );
#   {##ppPREPROCESS##}
   rr:subjectMap [ 
      dr:definedColumns ( [
         dr:name "UUID" ;
         dr:function op:uuid ; 
      ] );
      rr:template  "{@collection}{UUID}" ;
      rr:class oa:Annotation ;
      rr:class model:TermAnnotation ;
	  dr:condition [
         rr:column "uri";
         dr:transformationReference <#WikidataMapping> ;
		 op:matches "http.*" ;
	  ]
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate as:generator ;
      rr:objectMap [
         rr:constant "{@@iiannotator@@}" ; 
         rr:termType rr:IRI ;
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate dcterms:created ;
      rr:objectMap [
         dr:definedColumns ( [
            dr:name "TIME" ;
            dr:function op:currentTime; 
         ] );          
         rr:column "TIME";
         rr:datatype xsd:dateTime ;
         rr:termType rr:Literal ;
      ]
   ] ;     
   rr:predicateObjectMap [ 
      rr:predicate oa:hasTarget ;
      rr:objectMap  [ 
	     rr:parentTriplesMap [
		   rr:subjectMap [
			  rr:termType rr:BlankNode;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:hasSource ;
			  rr:objectMap [
			     rr:column "id" ;
				 dr:transformationReference <#EntityLookupTransformation> ;
		     ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onProperty> ;
			  rr:objectMap [
			     rr:constant "{@@iiproperty@@}" ;
				 rr:termType rr:Literal ;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onValue> ;
			  rr:objectMap [
			     rr:column "literal" ;
				 rr:termType rr:Literal;
			  ] ;
		   ] ;
		];
	 ];
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate  oa:hasBody ;
	  rr:objectMap [
         rr:column "uri";
         dr:transformationReference <#WikidataMapping> ;
      ] ;
   ] .

