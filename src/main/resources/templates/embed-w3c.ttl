@prefix rr:    <http://www.w3.org/ns/r2rml#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix http: 	<http://www.w3.org/2011/http#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix oa: <http://www.w3.org/ns/oa#> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix formats: <http://www.w3.org/ns/formats/> .
@prefix cnt: <http://www.w3.org/2011/content#> .

@prefix dr:   <http://islab.ntua.gr/ns/d2rml#> .
@prefix drop:  <http://islab.ntua.gr/ns/d2rml-op#> .
@prefix dris:  <http://islab.ntua.gr/ns/d2rml-is#> .

@prefix isd: <http://islab.ntua.gr/ns/datatype/> .

@prefix collection: <{##ppRESOURCE_PREFIX##}>

@prefix model: <http://sw.islab.ntua.gr/semaspace/model/>

<#ExecuteSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#EnrichMapping> ) ;
   dr:parameter [
      drop:name "iirdfsource"  ;
   ] ;
   dr:parameter [
      drop:name "iigraph"  ;
   ] ;
   dr:parameter [
      drop:name "iiclass"  ;
   ] .
   
   
<#SPARQLEndpoint>
   a dris:SPARQLEndpoint ;
   dris:uri "{@@iirdfsource@@}" .
   
<#EmbedderSource> 
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://pinkfloyd.deep.islab.ntua.gr:8000/get-embedding?model=stsb-roberta-large" ;
      http:methodName "POST" ;
      http:headers ( [ http:fieldName "Content-Type" ;
                       http:fieldValue "application/json" ; ] ) ;
      http:body [ a cnt:ContentAsText ;
                  cnt:chars "[ \"{@@content@@}\" ]"  ] ;
   ] ;
   dris:parameters ( [ 
      a dris:DataVariable;
      dris:name "content" ;
   ]  ) .  

<#EmbedderTransformation>
   dr:logicalSource [ 
      dr:source <#EmbedderSource> ;
	  dr:iterator "$";
	  dr:referenceFormulation dris:JSONPath;
   ] .
     
<#ConstructTransformation>
   dr:logicalSource [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlConstructQuery "{@@iiquery@@}" ;      
#      dr:sparqlConstructQuery "CONSTRUCT { <{@@id@@}> ?prop ?obj } {@@iigraph@@} WHERE { <{@@id@@}> ?prop ?obj } " ;
#      dr:sparqlConstructQuery "CONSTRUCT { <{@@id@@}> <http://purl.org/dc/elements/1.1/description> ?obj } {@@iigraph@@} WHERE { <{@@id@@}> <http://purl.org/dc/elements/1.1/description> ?obj } " ;
      dr:rdfSerialization formats:JSON-LD ;
      dr:iterator "$";
	  dr:referenceFormulation dris:JSONPath;
   ] .
      
<#EnrichMapping>  
   a  <http://islab.ntua.gr/ns/d2rml#PrimaryTriplesMap> ;
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT ?id {@@iigraph@@} WHERE { ?id a <{@@iiclass@@}> }" ;      
#      dr:limit  2;
#      dr:offset 2439 ;
   ] ;
   
#   {##ppPREPROCESS##}

   dr:transformations ( [
      dr:dataref <#ConstructTransformation> ;
      dr:transformationName "ConstructTransformation";
      dr:parameterBinding [ 
         dr:parameter "id" ;
         rr:column "id" ;
      ] ;
   ] 
   [
      dr:dataref <#EmbedderTransformation> ;
      dr:transformationName "EmbedderTransformation";
      dr:parameterBinding [ 
         dr:parameter "content" ;
         rr:column "TEXT" ;
         dr:escapeType dr:EscapeJSON ;
      ] ;
   ] 
   ) ;
   
   dr:definedColumn [
      dr:name "TEXT" ;
      dr:function drop:identity ;
      dr:parameterBinding [
         dr:parameter "input" ;
         rr:column "ConstructTransformation~~$['@graph'][*]['http://app-semantic-backend.net/temp/text']..['@value']" ; # the double .. is importrant to treat single object and arrays the same
         dr:joinString " " ;
      ] ;
   ] ;
   
   rr:subjectMap [ 
      dr:definedColumns ( [
         dr:name "UUID" ;
         dr:function drop:uuid ; 
      ] );
      rr:template  "{@collection}{UUID}" ;
      rr:class oa:Annotation ;
      rr:class model:EmbeddingAnnotation ;
   ] ;

#   rr:predicateObjectMap [ 
#      rr:predicate dcterms:created ;
#      rr:objectMap [
#         rr:column "ConstructTransformation~~$['@graph'][*]['http://purl.org/dc/elements/1.1/description']['@value']";
#         rr:termType rr:Literal ;
#      ]
#   ] ;  
      
   rr:predicateObjectMap [ 
      rr:predicate as:generator ;
      rr:objectMap [
         rr:constant "{@@iiembedder@@}" ; 
         rr:termType rr:IRI ;
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate dcterms:created ;
      rr:objectMap [
         dr:definedColumns ( [
            dr:name "TIME" ;
            dr:function drop:currentTime; 
         ] );          
         rr:column "TIME";
         rr:datatype xsd:dateTime ;
         rr:termType rr:Literal ;
      ]
   ] ;     
   
   rr:predicateObjectMap [ 
      rr:predicate oa:hasTarget ;
      rr:objectMap  [ 
	     rr:parentTriplesMap [
		   rr:subjectMap [
			  rr:termType rr:BlankNode;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:hasSource ;
			  rr:objectMap [
			     rr:column "id" ;
			  ] ;
		   ] ;
		];
	 ];
   ] ;   
   
   rr:predicateObjectMap [ 
      rr:predicate  oa:hasBody ;
      rr:objectMap [
         dr:definedColumn [
            dr:name "VECTOR" ;
      		dr:function drop:identity ;
      	    dr:parameterBinding [
               dr:parameter "input" ;
               rr:column "EmbedderTransformation~~$['0']";
               dr:joinString "," ;
            ] ;
         ] ;
   
         rr:template "[{VECTOR}]";
         rr:termType rr:Literal ;
         rr:datatype isd:doubleVector ;
      ]
   ] ; 

#   rr:predicateObjectMap [ 
#      rr:predicate dcterms:created2 ;
#      rr:objectMap [
#         rr:column "TEXT";
#         rr:termType rr:Literal ;
#      ]
#   ] ; 
