@prefix rr:    <http://www.w3.org/ns/r2rml#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix http: 	<http://www.w3.org/2011/http#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix oa: <http://www.w3.org/ns/oa#> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix dcterms: <http://purl.org/dc/terms/> .

@prefix dr:   <http://islab.ntua.gr/ns/d2rml#> .
@prefix drop:  <http://islab.ntua.gr/ns/d2rml-op#> .
@prefix dris:  <http://islab.ntua.gr/ns/d2rml-is#> .

@prefix collection: <{##ppRESOURCE_PREFIX##}>

@prefix model: <http://sw.islab.ntua.gr/semaspace/model/>

<#IsThesaurusLoadedSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#IsThesaurusLoadedMapping> ) .

<#UnloadThesaurusSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#UnloadThesaurusMapping> ) .

<#IsPreparedSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#IsPreparedMapping> ) .

<#PrepareSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#PrepareMapping> ) .

<#ExecuteSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#EnrichMapping> ) .

### IS THESAURUS LOADED

<#IsThesaurusLoadedService>
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/inknowledge/api/is-graph-loaded" ;
	  http:methodName "POST" ;
	  http:params ( 
	                [ http:paramName "endpoint" ;             http:paramValue "{@@iithesaurus_endpoint@@}" ] 
                  ) ;
   ] .
     
<#IsThesaurusLoadedMapping>  
   dr:logicalArray [ 
      a dr:RegExItemArray ;
      dr:source <#IsThesaurusLoadedService> ;
      dr:iterator "(?s)(^.*$)" ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "iithesaurus_endpoint" ;
      ] ;
   ] ;
   
   rr:subjectMap [ 
      rr:template "" ;
      rr:termType rr:BlankNode;
   ] ;
   
   rr:predicateObjectMap [
      rr:predicate model:thesaurusLoaded ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] 
   ] ;
   
   rr:predicateObjectMap [
      rr:predicate model:thesaurusLoading ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is being loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] 
   ] .
   
### UNLOAD THESAURUS

<#UnloadThesaurusService>
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/inknowledge/api/graph-unload" ;
	  http:methodName "POST" ;
	  http:params ( 
	                [ http:paramName "endpoint" ;             http:paramValue "{@@iithesaurus_endpoint@@}" ] 
                  ) ;
   ] .
   
<#UnloadThesaurusMapping>  
   dr:logicalArray [ 
      a dr:RegExItemArray ;
      dr:source <#UnloadThesaurusService> ;
      dr:iterator "(?s)(^.*$)" ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "iithesaurus_endpoint" ;
      ] ;
   ] ;
   
   rr:subjectMap [ 
      rr:template "" ;
      rr:termType rr:BlankNode;
   ] ;
   
   rr:predicateObjectMap [
      rr:predicate model:thesaurusUnloaded ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus has been unloaded."
            ] ;
         ] [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus was not loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] 
   ] .
   
      
### CHECK PREPARED

<#InKnowledgeIsPreparedService>
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/inknowledge/api/is-graph-configuration-loaded" ;
	  http:methodName "POST" ;
	  http:params ( 
	                [ http:paramName "endpoint" ;             http:paramValue "{@@iithesaurus_endpoint@@}" ] 
	                [ http:paramName "lang" ;                 http:paramValue "{@@language@@}"      ] 
	                [ http:paramName "scheme" ;               http:paramValue "{@@scheme@@}"    ] 
	                [ http:paramName "mode" ;                 http:paramValue "thesaurus URIs"      ]
	                [ http:paramName "lemmatizer" ;           http:paramValue "<#<{@@lemmatizer@@}={##true##}>>spacy<<{@@lemmatizer@@}>><<{@@lemmatizer@@}>#>" ]
                  ) ;
   ] .
   
     
<#IsPreparedMapping>  
   dr:logicalArray [ 
      a dr:RegExItemArray ;
      dr:source <#InKnowledgeIsPreparedService> ;
      dr:iterator "(?s)(^.*$)" ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "iithesaurus_endpoint" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "scheme" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "language" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "lemmatizer" ;
      ] ;
   ] ;
   
   rr:subjectMap [ 
      rr:template "" ;
      rr:termType rr:BlankNode;
   ] ;
   
   rr:predicateObjectMap [
      rr:predicate model:annotatorPrepared ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] 
   ] ;

   rr:predicateObjectMap [
      rr:predicate model:annotatorPreparing ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is being loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] ;
   ] .


### PREPARE

<#InKnowledgePrepareService>
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/inknowledge/api/graph-load" ;
	  http:methodName "POST" ;
	  http:params ( 
	                [ http:paramName "endpoint" ;             http:paramValue "{@@iithesaurus_endpoint@@}" ] 
	                [ http:paramName "lang" ;                 http:paramValue "{@@language@@}"      ] 
	                [ http:paramName "scheme" ;               http:paramValue "{@@scheme@@}"    ] 
	                [ http:paramName "mode" ;                 http:paramValue "thesaurus URIs"      ]
	                [ http:paramName "lemmatizer" ;           http:paramValue "<#<{@@lemmatizer@@}={##true##}>>spacy<<{@@lemmatizer@@}>><<{@@lemmatizer@@}>#>" ]
                  ) ;
   ] .
     
<#PrepareMapping>  
   dr:logicalArray [ 
      a dr:RegExItemArray ;
      dr:source <#InKnowledgePrepareService> ;
      dr:iterator "(?s)(^.*$)" ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "iithesaurus_endpoint" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "scheme" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "language" ;
      ] ;
      dris:parameter [ 
         a dris:DataVariable;
         dris:name "lemmatizer" ;
      ] ;
   ] ;
   
   rr:subjectMap [ 
      rr:template "" ;
      rr:termType rr:BlankNode;
   ] ;
   
   rr:predicateObjectMap [
      rr:predicate model:annotatorPrepared ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is already loaded."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] 
   ] ;

   rr:predicateObjectMap [
      rr:predicate model:annotatorPreparing ;
      rr:objectMap [
         dr:cases ( [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus is already being loaded."
            ] ;
         ] [
            rr:constant true;
            dr:condition [
               rr:column "##1" ;
               drop:eq "The thesaurus has been scheduled for loading."
            ] ;
         ] [
           rr:constant false;
         ] ) ;
      ] ;
   ] .
   

### EXECUTE

<#SPARQLEndpoint>
   a dris:SPARQLEndpoint ;
   dris:uri "{@@iirdfsource@@}" .
   
<#InKnowledgeLookupService>
   a dris:HTTPSource ;
   dris:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/inknowledge/api/graph-lookup" ;
	  http:methodName "POST" ;
	  http:params ( 
	                [ http:paramName "endpoint" ;             http:paramValue "{@@thesaurus@@}"  ] 
	                [ http:paramName "text" ;                 http:paramValue "{@@text@@}"       ] 
	                [ http:paramName "text-lang" ;            http:paramValue "{@@textLang@@}"   ] 
	                [ http:paramName "autodetect-text-lang" ; http:paramValue "false"            ] 
	                [ http:paramName "lang" ;                 http:paramValue "{@@lang@@}"       ] 
	                [ http:paramName "scheme" ;               http:paramValue "{@@scheme@@}"     ] 
	                [ http:paramName "mode" ;                 http:paramValue "thesaurus URIs"   ]
	                [ http:paramName "lemmatizer" ;           http:paramValue "<#<{@@lemmatizer@@}={##true##}>>spacy<<{@@lemmatizer@@}>><<{@@lemmatizer@@}>#>" ]
	                [ http:paramName "full-text-match" ;      http:paramValue "false"            ]
	              ) ;
   ] .
   
<#InKnowledgeLookupTransformation>
   dr:logicalSource [ 
      dr:source <#InKnowledgeLookupService> ;
      dr:iterator "$[*]";
	  dr:referenceFormulation dris:JSONPath;
   ] .
   
<#EnrichMapping>  
   a  <http://islab.ntua.gr/ns/d2rml#PrimaryTriplesMap> ; 
   
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT DISTINCT ?id ?r0 ?lexicalValue_r0 ?language_r0 {@@iigraph@@} WHERE { ?id {@@iiproperty@@} ?r0 . FILTER (isLiteral(?r0)) . BIND(STR(?r0) AS ?lexicalValue_r0) . BIND(LANG(?r0) AS ?language_r0) }" ;      
	  dris:parameters ( [ 
         a dris:ExternalVariable;
         dris:name "iigraph" ;
      ] [ 
         a dris:ExternalVariable;
         dris:name "iiproperty" ;
      ] ) ;
   ] ;
   
   {##ppPREPROCESS##}
   
   dr:transformation [
      dr:dataref <#InKnowledgeLookupTransformation> ;
      dr:name "InKnowledgeLookupTransformation";
      dr:parameterBinding [ 
         dr:parameter "text" ;
         rr:column "lexicalValue" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "thesaurus" ;
         rr:constant "{@@iithesaurus_endpoint@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "scheme" ;
         rr:constant "{@@scheme@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "lang" ;
         rr:constant "{@@language@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "textLang" ;
         dr:cases ( [
            rr:column "language" ;
            dr:condition [
               dr:function drop:isNotEmpty ;
               dr:parameterBinding [
                  dr:parameter "input" ;
                  rr:column "language" ;
               ] ; 
   	        ] ;
	     ] [
            rr:constant "" ;
         ] ) ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "lemmatizer" ;
         rr:constant "{@@lemmatizer@@}" ;
      ] ;   
   ] ;
   
   dr:pivot [ 
      rr:column "InKnowledgeLookupTransformation~~" ;
   ] ;   
   
   rr:subjectMap [ 
      dr:definedColumns ( [
         dr:name "UUID" ;
         dr:function drop:uuid ; 
      ] );
      rr:template  "{@collection}{UUID}" ;
      rr:class oa:Annotation ;
      rr:class model:TermAnnotation ;
      dr:condition [
         rr:column "InKnowledgeLookupTransformation~~$.term";
         drop:neq "";
      ];
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate as:generator ;
      rr:objectMap [
         rr:constant "{@@iiannotator@@}" ; 
         rr:termType rr:IRI ;
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate dcterms:created ;
      rr:objectMap [
         dr:definedColumns ( [
            dr:name "TIME" ;
            dr:function drop:currentTime; 
         ] );          
         rr:column "TIME";
         rr:datatype xsd:dateTime ;
         rr:termType rr:Literal ;
      ]
   ] ;     
   rr:predicateObjectMap [ 
      rr:predicate oa:hasTarget ;
      rr:objectMap  [ 
	     rr:parentTriplesMap [
		   rr:subjectMap [
			  rr:termType rr:BlankNode;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:hasSource ;
			  rr:objectMap [
			     rr:column "id" ;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onProperty> ;
			  rr:objectMap [
			     rr:constant "{@@iiproperty@@}" ;
				 rr:termType rr:Literal ;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onValue> ;
			  rr:objectMap [
			     rr:column "r0" ;
				 rr:termType rr:Literal;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:start ;
			  rr:objectMap [
                 rr:column "InKnowledgeLookupTransformation~~$.start";
				 rr:datatype xsd:nonNegativeInteger;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:end ;
			  rr:objectMap [
                 rr:column "InKnowledgeLookupTransformation~~$.end";
				 rr:datatype xsd:nonNegativeInteger;
			  ] ;
		   ] ;
		];
	 ];
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate  <http://sw.islab.ntua.gr/annotation/score> ;
	  rr:objectMap [
         rr:column "InKnowledgeLookupTransformation~~$.score";
         rr:datatype xsd:double;
      ] ;
   ] ;     
   rr:predicateObjectMap [ 
      rr:predicate  oa:hasBody ;
	  rr:objectMap [
         rr:column "InKnowledgeLookupTransformation~~$.term";
         rr:termType rr:IRI ;
      ] ;
   ] .

