@prefix rr:    <http://www.w3.org/ns/r2rml#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix http: 	<http://www.w3.org/2011/http#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix oa: <http://www.w3.org/ns/oa#> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix cnt: <http://www.w3.org/2011/content#> .

@prefix dr:   <http://islab.ntua.gr/ns/d2rml#> .
@prefix drop:  <http://islab.ntua.gr/ns/d2rml-op#> .
@prefix dris:  <http://islab.ntua.gr/ns/d2rml-is#> .

@prefix collection: <{##ppRESOURCE_PREFIX##}>

@prefix model: <http://sw.islab.ntua.gr/semaspace/model/>

<#SPARQLEndpoint>
   a dris:SPARQLEndpoint ;
   dris:uri "{@@iirdfsource@@}" .
   
<#ElasticSearchService>
   a dris:HTTPSource ;
   dris:storable false ;
   dris:request [ 
      http:absoluteURI "{@@NO_URL_ENCODE@@elasticsearch-url@@}" ;
      http:methodName "POST" ;
      http:headers ( [ http:fieldName "Content-Type" ;
                       http:fieldValue "application/json" ; ] ) ;
      http:body [ a cnt:ContentAsText ;
                  cnt:chars "{@@elasticsearch-query@@}" ] ;
   ] ;
   dris:parameters ( [ 
      a dris:DataVariable;
      dris:name "elasticsearch-url" ;
   ] [ 
      a dris:DataVariable;
      dris:name "elasticsearch-query" ;
   ]  ) .
   
<#ComparatorService>
   a dris:HTTPSource ;
   dris:storable false ;
   dris:request [ 
      http:absoluteURI "{@@NO_URL_ENCODE@@comparator-url@@}?iris={@@uri-1@@},{@@uri-2@@}" ;
      http:methodName "GET" ;
   ] ;
   dris:parameters ( [ 
      a dris:DataVariable;
      dris:name "comparator-url" ;
   ] [ 
      a dris:DataVariable;
      dris:name "uri-1" ;
   ] [ 
      a dris:DataVariable;
      dris:name "uri-2" ;
   ]  ) .
      
<#ServiceTransformation>
   dr:logicalSource [ 
      dr:source <#ElasticSearchService> ;
      dr:iterator "$";
	  dr:referenceFormulation dris:JSONPath;
   ] . 
   
<#ComparatorTransformation>
   dr:logicalSource [ 
      dr:source <#ComparatorService> ;
      dr:iterator "$";
	  dr:referenceFormulation dris:JSONPath;
   ] .    
   
<#EntityLookupTransformation>  
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT DISTINCT ?id {@@iigraph@@} WHERE { {@@iiwhere@@} {@@iivalues@@} BIND(?c_0 AS ?id) }" ;
   ] .
   
<#ExecuteSpecification>
   a dr:D2RMLSpecification ;
   dr:logicalDatasets ( <#EnrichMapping> ) .
   
<#EnrichMapping>  
   a  <http://islab.ntua.gr/ns/d2rml#PrimaryTriplesMap> ;
   rr:logicalTable [ 
      dr:source <#SPARQLEndpoint> ;
      dr:sparqlQuery "SELECT DISTINCT {@@iivariables@@} {@@iigraph@@} WHERE  { {@@iiwhere@@} {@@iifilters@@} }" ;
	  dris:parameters ( [ 
         a dris:ExternalVariable;
         dris:name "iigraph" ;
      ] [ 
         a dris:ExternalVariable;
         dris:name "iivariables" ;
      ] [ 
         a dris:ExternalVariable;
         dris:name "iiwhere" ;
      ] [ 
         a dris:ExternalVariable;
         dris:name "iifilters" ;
      ]) ;
#      dr:limit 5 ;
#      dr:offset 25 ;
   ] ;
   
   dr:transformations (
   [ 
      dr:dataref <#ServiceTransformation> ;
      dr:name "ServiceTransformation";   
      dr:parameterBinding [ 
         dr:parameter "elasticsearch-url" ;
         rr:constant "{@@elasticsearch-url@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "elasticsearch-query" ;
         rr:constant "{@@elasticsearch-query@@}" ;
      ] ;
      
{##ppPREPROCESS_QUERY_BINDINGS##}
      
   ] 
   [
      dr:dataref <#EntityLookupTransformation> ;
      dr:name "EntityLookupTransformation";
      dr:parameterBinding [ 
         dr:parameter "iirdfsource" ;
         rr:constant "{@@iirdfsource@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "iigraph" ;
         rr:constant "{@@iigraph@@}" ;
      ] ;   
      dr:parameterBinding [ 
         dr:parameter "iiwhere" ;
         rr:constant "{@@iiwhere@@}" ;
      ] ;
      dr:parameterBinding [ 
         dr:parameter "iivalues" ;
         rr:constant "{@@iivalues@@}" ;
      ] ;
            
{##ppPREPROCESS_UNGROUP_BINDINGS##}      

   ]
   ) ;   
   
   dr:pivots ( [ 
      rr:column "ServiceTransformation~~" ;
      
      dr:definedColumn [ 
         dr:name "SCORE" ;
         dr:function drop:mathExpressionEvaluate ; 
         dr:parameterBinding [ 
	        dr:parameter "expression" ;
            rr:constant "_x1/_x2"  ;
         ] ; 
         dr:parameterBinding [ 
	        dr:parameter "_x1" ;
            rr:column "ServiceTransformation~~$.score"  ;
         ] ;      
         dr:parameterBinding [ 
	        dr:parameter "_x2" ;
            rr:column "[%#0%]ServiceTransformation~~$.score"  ;
         ] ;       
         dr:parameterBinding [ 
	        dr:parameter "datatype" ;
            rr:constant xsd:double  ;
         ] ;       
      ] ;  
   ] [
      rr:column "EntityLookupTransformation~~" ;
      
      dr:locally [
         dr:transformation [
            dr:dataref <#ComparatorTransformation> ;
            dr:name "ComparatorTransformation";   
            dr:parameterBinding [ 
               dr:parameter "comparator-url" ;
               rr:constant "{@@comparator-url@@}" ;
               dr:condition [
                  dr:booleanOperator drop:logicalAnd ;
                  dr:condition [
                     dr:function drop:geq;
                     dr:parameterBinding [ 
                        dr:parameter "input" ;
                        rr:column "SCORE" ;
                     ] ;
                     dr:parameterBinding [ 
                        dr:parameter "comparand" ;
#                        rr:constant 0.25 ;
                        rr:constant 0.5 ;
                     ] ;
                     dr:parameterBinding [ 
                        dr:parameter "datatype" ;
                        rr:constant xsd:double ;
                     ] ;
                  ] ; 
                  dr:condition [
                     dr:function drop:ge;
                     dr:parameterBinding [ 
                        dr:parameter "input" ;
                        rr:column "EntityLookupTransformation~~id" ;
                     ] ;
                     dr:parameterBinding [ 
                        dr:parameter "comparand" ;
                        rr:column "ServiceTransformation~~$.uri" ;
                     ] ;
                     dr:parameterBinding [ 
                        dr:parameter "datatype" ;
                        rr:constant xsd:string ;
                     ] ;
                  ] ;
               ] ; 
            ] ;
            dr:parameterBinding [ 
               dr:parameter "uri-1" ;
               rr:column "EntityLookupTransformation~~id" ;
            ] ;
            dr:parameterBinding [ 
               dr:parameter "uri-2" ;
               rr:column "ServiceTransformation~~$.uri" ;
            ] ;
         ] ;
      ] ;
   ] 
   ) ; 
   
{##ppPREPROCESS##}
   
   rr:subjectMap [ 
      dr:definedColumn [
         dr:name "UUID" ;
         dr:function drop:uuid ; 
      ];
      
      rr:template  "{@collection}{UUID}" ;
      rr:class oa:Annotation ;
      rr:class model:TermAnnotation ;
      
#      dr:condition [
#         dr:booleanOperator drop:logicalAnd ;
#         dr:condition [
#            dr:booleanOperator drop:logicalNot ;
#            dr:condition [
#              dr:function drop:equals;
#               dr:parameterBinding [ 
#                  dr:parameter "input" ;
#                  rr:column "[%order%]ServiceTransformation~~##1" ;
#               ] ;
#               dr:parameterBinding [ 
#                  dr:parameter "comparand" ;
#                  rr:constant 0 ;
#               ] ;
#            ] ;
#         ] ;
         dr:condition [
            dr:function drop:geq;
            dr:parameterBinding [ 
               dr:parameter "input" ;
               rr:column "ComparatorTransformation~~$.result" ;
            ] ;
            dr:parameterBinding [ 
               dr:parameter "comparand" ;
               rr:constant 0.9 ;
            ] ;
            dr:parameterBinding [ 
               dr:parameter "datatype" ;
               rr:constant xsd:double ;
            ] ;
         ] ; 
#      ] ;
      
   ] ;

   rr:predicateObjectMap [ 
      rr:predicate as:generator ;
      rr:objectMap [
         rr:constant "{@@iiannotator@@}" ; 
         rr:termType rr:IRI ;
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate dcterms:created ;
      rr:objectMap [
         dr:definedColumns ( [
            dr:name "TIME" ;
            dr:function drop:currentTime; 
         ] );          
         rr:column "TIME";
         rr:datatype xsd:dateTime ;
         rr:termType rr:Literal ;
      ]
   ] ;     
   rr:predicateObjectMap [ 
      rr:predicate oa:hasTarget ;
      rr:objectMap  [ 
	     rr:parentTriplesMap [
		   rr:subjectMap [
			  rr:termType rr:BlankNode;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:hasSource ;
			  rr:objectMap [
			     rr:column "EntityLookupTransformation~~id" ;
			  ] ;
		   ] ;
           rr:predicateObjectMap [
              rr:predicate <http://sw.islab.ntua.gr/annotation/onGraphTree> ;
              rr:objectMap [
                 rr:constant "{@@iinosourcewhere@@}" ;
                 rr:termType rr:Literal ;
              ] ;
           ] ;     

{##ppPREPROCESS_VALUE_BINDINGS##}   

		];
	 ];
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate  oa:hasBody ;
	  rr:objectMap [
         rr:column "ServiceTransformation~~$.uri";
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate  <http://sw.islab.ntua.gr/annotation/score> ;
	  rr:objectMap [
         rr:column "ComparatorTransformation~~$.result";
         rr:datatype xsd:double;
      ] ;
   ] .

