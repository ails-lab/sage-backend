@prefix rr:    <http://www.w3.org/ns/r2rml#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix http: 	<http://www.w3.org/2011/http#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix oa: <http://www.w3.org/ns/oa#> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix dcterms: <http://purl.org/dc/terms/> .

@prefix dr:   <http://islab.ntua.gr/ns/d2rml#> .
@prefix op:  <http://islab.ntua.gr/ns/d2rml-op#> .
@prefix is:  <http://islab.ntua.gr/ns/d2rml-is#> .

@prefix collection:    <http://sw.islab.ntua.gr/semaspace/resource/annotation/> .
@prefix model: <http://sw.islab.ntua.gr/semaspace/model/>

<#SPARQLService>
   a is:SPARQLService ;
   is:uri "{@@iirdfsource@@}" .
   
<#DatifyService>
   a is:HTTPSource ;
   is:request [ 
      http:absoluteURI "http://apps.islab.ntua.gr/intime/api/date?text={@@text@@}&minYear={@@minYear@@}&maxYear={@@maxYear@@}" ;
      http:methodName "GET" ;
   ] ;
   is:parameters ( [ 
      a is:DataVariable;
      is:name "text" ;
   ] [ 
      a is:DataVariable;
      is:name "minYear" ;
   ] [ 
      a is:DataVariable;
      is:name "maxYear" ;
   ]) .
   
<#DateMapping>
   dr:logicalSource [ 
      dr:source <#DatifyService> ;
      dr:iterator "$";
	  dr:referenceFormulation is:JSONPath;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "text" ;
      rr:column "{##ppLEXICAL-VALUE##}" ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "minYear" ;
      rr:constant "{@@minYear@@}" ;
   ] ;
   dr:parameterBinding [ 
      dr:parameter "maxYear" ;
      rr:constant "{@@maxYear@@}" ;
   ] .	
 
   
<#EnrichMapping>  
   a  <http://islab.ntua.gr/ns/d2rml#PrimaryTriplesMap> ;
   rr:logicalTable [ 
      dr:source <#SPARQLService> ;
      dr:sparqlQuery "SELECT ?id ?literal ?lexicalValue ?language WHERE { GRAPH <{@@iigraph@@}> { ?id {@@iiproperty@@} ?literal . FILTER (isLiteral(?literal)) . BIND(STR(?literal) AS ?lexicalValue) . BIND(LANG(?literal) AS ?language) } }" ;      
	  is:parameter [ 
         a is:ExternalVariable;
         is:name "iigraph" ;
      ] ;
	  is:parameter [ 
         a is:ExternalVariable;
         is:name "iiproperty" ;
      ]  ;	  
   ] ;
   dr:transformations ( <#DateMapping> ) ;
   dr:pivot [ 
      dr:transformationReference <#DateMapping> ;
   ] ;
   {##ppPREPROCESS##}
   rr:subjectMap [ 
      dr:definedColumns ( [
         dr:name "UUID" ;
         dr:function op:uuid ; 
      ] );
      rr:template  "{@collection}{UUID}" ;
      rr:class oa:Annotation ;
      rr:class model:TemporalAnnotation ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate as:generator ;
      rr:objectMap [
         rr:constant "{@@iiannotator@@}" ; 
         rr:termType rr:IRI ;
      ] ;
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate dcterms:created ;
      rr:objectMap [
         dr:definedColumns ( [
            dr:name "TIME" ;
            dr:function op:currentTime; 
         ] );          
         rr:column "TIME";
         rr:datatype xsd:dateTime ;
         rr:termType rr:Literal ;
      ]
   ] ;
   rr:predicateObjectMap [ 
      rr:predicate oa:hasTarget ;
      rr:objectMap  [ 
	     rr:parentTriplesMap [
		   rr:subjectMap [
			  rr:termType rr:BlankNode;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate oa:hasSource ;
			  rr:objectMap [
			     rr:column "id" ;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onProperty> ;
			  rr:objectMap [
			     rr:constant "{@@iiproperty@@}" ;
				 rr:termType rr:Literal ;
			  ] ;
		   ] ;
		   rr:predicateObjectMap [
		      rr:predicate <http://sw.islab.ntua.gr/annotation/onValue> ;
			  rr:objectMap [
			     rr:column "literal" ;
				 rr:termType rr:Literal;
			  ] ;
		   ] ;
	    ];
	 ];
   ] ;
   rr:predicateObjectMap [ 
      rr:predicateMap [
         rr:constant oa:hasBody ;
         dr:condition [
            rr:column "$.type";
            dr:transformationReference <#DateMapping> ;
            op:eq "instant";
         ] ;
      ] ;        
	  rr:objectMap [
         rr:column "$.time";
         dr:transformationReference <#DateMapping> ;
         rr:termType  rr:IRI ;
      ] ;
   ] ;   
   rr:predicateObjectMap [ 
      rr:predicateMap [
         rr:constant oa:hasBody ;
         dr:condition [
            rr:column "$.type";
            dr:transformationReference <#DateMapping> ;
            op:eq "interval";
         ] ;
      ] ;        
	  rr:objectMap [
	     rr:parentTriplesMap [
			rr:subjectMap [
		       rr:termType rr:BlankNode ;
               rr:class time:DateTimeInterval ;
            ] ;
            rr:predicateObjectMap [
               rr:predicateMap [
                  dr:cases ( [
                	rr:constant time:hasBeginning ;
                	dr:condition [
                		dr:reference "$.startTime" ;
                		dr:transformationReference <#DateMapping> ;
                		op:matches "^.*timeline/resource/D.*$";
                	] 
                  ] [ 
                	  rr:constant time:intervalStartedBy ;
                  ] ) ;
               ] ;
               rr:objectMap [
                  dr:reference "$.startTime" ;
                  dr:transformationReference <#DateMapping> ;
                  rr:termType  rr:IRI ;
               ] ;
            ] ;
            rr:predicateObjectMap [
               rr:predicateMap [
                  dr:cases ( [
                	rr:constant time:hasEnd ;
                	dr:condition [
                		dr:reference "$.endTime" ;
	                    dr:transformationReference <#DateMapping> ;                		
                		op:matches "^.*timeline/resource/D.*$";
                	] 
                  ] [ 
                	  rr:constant time:intervalFinishedBy ;
                  ] ) ;
               ] ;
               rr:objectMap [
                  dr:reference "$.endTime" ;
                  dr:transformationReference <#DateMapping> ;
                  rr:termType  rr:IRI ;
               ] ;
            ] ;
         ] ;
     ] ;
   ] .

